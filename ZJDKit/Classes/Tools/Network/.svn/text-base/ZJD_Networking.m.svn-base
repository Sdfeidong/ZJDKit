//
//  ZJD_Networking.m
//  DKT4.0
//
//  Created by aidong on 16/5/23.
//  Copyright © 2016年 aidong. All rights reserved.
//

#import "ZJD_Networking.h"

#import "AFNetworking.h"
#import "AFNetworkActivityIndicatorManager.h"

#import "YYKit.h"
#import "MBProgressHUD.h"

static NSMutableArray *tasks;
@implementation ZJD_Networking

+ (ZJD_Networking *)sharedZJD_Networking
{
    static ZJD_Networking *handler = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        handler = [[ZJD_Networking alloc] init];
    });
    return handler;
}

+ (NSMutableArray *)tasks{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        tasks = [[NSMutableArray alloc] init];
    });
    return tasks;
}

/**
 *  @param requestType  请求方法(GET、POST、PUT、DELETE、HEAD、PATCH)
 *
 *  @param url     请求连接，根路径
 *  @param params  参数
 *  @param success 请求成功返回数据
 *  @param fail    请求失败
 *  @param showHUD 是否显示HUD
 *  @param cacheTime 缓存时间，以秒为单位 -1 为永久缓存  0 为不缓存
 */
+ (ZJD_URLSessionTask *)baseWithUrl:(NSString *)url
                             params:(NSDictionary *)params
                          cacheTime:(NSInteger)cacheTime
                        requestType:(ZJD_RequestType)requestType
                            success:(ZJD_HandlerSuccess)success
                               fail:(ZJD_HandlerFail)fail
                            showHUD:(BOOL)showHUD
                         faileAlert:(BOOL)faileAlert {
    
    DLog(@"\n 请求地址----%@\n 请求参数----%@",url,params);

    // URL参数处理
    if (url == nil) {
        return nil;
    }
    url = [url stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    url = [url stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
    
    // 若有缓存先返回缓存数据出页面
    NSString *cacheDirectory = [ZJD_FileManageUnit userFolder];
    EGOCache *egoCache = [[EGOCache globalCache] initWithCacheDirectory:cacheDirectory];
    if (cacheTime && cacheTime != 0) {
        if (success) {
            NSData *responseObject = [egoCache dataForKey:url];
            id response = [self resultsWithResponseObject:responseObject];
            success(response);
        }
    }
    
    // 判断网络
    if (![self isConnectionAvailable]) {
        [MBProgressHUD showTipMessageInWindow:Msg_NetworkError];
        return nil;
    }

    AFHTTPSessionManager *manager=[self getAFManager];
    ZJD_URLSessionTask *sessionTask=nil;
    
    if (requestType == ZJD_RequestTypeGet) {
        
        sessionTask = [manager GET:url parameters:params progress:^(NSProgress * _Nonnull downloadProgress) {
            
        } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            
            [self requestSuccessWithUrl:url responseObject:responseObject cacheTime:cacheTime sessionTask:sessionTask success:success showHUD:showHUD];
            
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            
            [self requestFailWithUrl:url error:error sessionTask:sessionTask fail:fail showHUD:showHUD faileAlert:faileAlert];
        }];
        
    } else if (requestType == ZJD_RequestTypePost){
        
        sessionTask = [manager POST:url parameters:params progress:^(NSProgress * _Nonnull uploadProgress) {
            
        } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            
            [self requestSuccessWithUrl:url responseObject:responseObject cacheTime:cacheTime sessionTask:sessionTask success:success showHUD:showHUD];
            
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            
            [self requestFailWithUrl:url error:error sessionTask:sessionTask fail:fail showHUD:showHUD faileAlert:faileAlert];
        }];
        
    } else if (requestType == ZJD_RequestTypePut){
        
        sessionTask = [manager PUT:url parameters:params success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            
            [self requestSuccessWithUrl:url responseObject:responseObject cacheTime:cacheTime sessionTask:sessionTask success:success showHUD:showHUD];
            
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            
            [self requestFailWithUrl:url error:error sessionTask:sessionTask fail:fail showHUD:showHUD faileAlert:faileAlert];
        }];
        
    } else if (requestType == ZJD_RequestTypeDelete){
        
        sessionTask = [manager DELETE:url parameters:params success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            
            [self requestSuccessWithUrl:url responseObject:responseObject cacheTime:cacheTime sessionTask:sessionTask success:success showHUD:showHUD];
            
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            
            [self requestFailWithUrl:url error:error sessionTask:sessionTask fail:fail showHUD:showHUD faileAlert:faileAlert];
        }];
        
    } else if (requestType == ZJD_RequestTypeHead){
        
        sessionTask = [manager HEAD:url parameters:params success:^(NSURLSessionDataTask * _Nonnull task) {
            
            [self requestSuccessWithUrl:url responseObject:nil cacheTime:cacheTime sessionTask:sessionTask success:success showHUD:showHUD];
            
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            
            [self requestFailWithUrl:url error:error sessionTask:sessionTask fail:fail showHUD:showHUD faileAlert:faileAlert];
        }];
        
    } else if (requestType == ZJD_RequestTypePatch){
        
        sessionTask = [manager PATCH:url parameters:params success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            
            [self requestSuccessWithUrl:url responseObject:responseObject cacheTime:cacheTime sessionTask:sessionTask success:success showHUD:showHUD];
            
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            
            [self requestFailWithUrl:url error:error sessionTask:sessionTask fail:fail showHUD:showHUD faileAlert:faileAlert];
        }];
    }
    
    if (sessionTask) {
        [[self tasks] addObject:sessionTask];
    }
    
    __async_main__,^{
        // 任务存在且显示HUD 主线程更新UI
        if (sessionTask && showHUD) {
            [self loadingMBProgressHUDisTapCancel:YES task:sessionTask];
        }
    });
    
    return sessionTask;
}

+ (ZJD_URLSessionTask *)uploadWithImage:(UIImage *)image
                                   url:(NSString *)url
                              filename:(NSString *)filename
                                  name:(NSString *)name
                                params:(NSDictionary *)params
                              progress:(ZJD_HandlerProgress)progress
                               success:(ZJD_HandlerSuccess)success
                                  fail:(ZJD_HandlerFail)fail
                               showHUD:(BOOL)showHUD
                            faileAlert:(BOOL)faileAlert{
    
    DLog(@"请求地址----%@\n    请求参数----%@",url,params);
    if (url==nil) {
        return nil;
    }
    
    //检查地址中是否有中文
    url = [self strUTF8Encoding:url];
    
    AFHTTPSessionManager *manager=[self getAFManager];
    
    ZJD_URLSessionTask *sessionTask = [manager POST:url parameters:params constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        
        if (image) {
            //压缩图片
            NSData *imageData = UIImageJPEGRepresentation(image, 1.0);
            
            NSString *imageFileName = filename;
            if (!kStringIsNotEmpty(imageFileName)) {
                imageFileName = [ZJD_ResourceFile getImageDefaultName];
            }
            
            // 上传图片，以文件流的格式
            [formData appendPartWithFileData:imageData name:name fileName:imageFileName mimeType:@"image/jpeg"];
        }
        
    } progress:^(NSProgress * _Nonnull uploadProgress) {
        
        DLog(@"上传进度--%lld,总进度---%lld",uploadProgress.completedUnitCount,uploadProgress.totalUnitCount);
        if (progress) {
            progress(uploadProgress.completedUnitCount, uploadProgress.totalUnitCount);
        }
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        
        responseObject = [self resultsWithResponseObject:responseObject];
        
        DLog(@"上传图片成功=%@",responseObject);
        if (success) {
            success(responseObject);
        }
        
        [[self tasks] removeObject:sessionTask];
        
        if (showHUD) {
            [MBProgressHUD hiddenMBProgressHUD];
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        DLog(@"error=%@",error);
        if (fail) {
            fail(error);
        }
        
        [[self tasks] removeObject:sessionTask];
        
        if (showHUD) {
            [MBProgressHUD hiddenMBProgressHUD];
        }
        
        // 网络错误的提示
        if (faileAlert) {
            [self dealWithError:error];
        }
        
    }];
    
    if (sessionTask) {
        [[self tasks] addObject:sessionTask];
    }
    
    __async_main__,^{
        // 任务存在且显示HUD 主线程更新UI
        if (sessionTask && showHUD) {
            [self loadingMBProgressHUDisTapCancel:YES task:sessionTask];
        }
    });
    
    return sessionTask;
}

+ (ZJD_URLSessionTask *)downloadWithUrl:(NSString *)url
                             saveToPath:(NSString *)saveToPath
                               progress:(ZJD_HandlerProgress)progressBlock
                                success:(ZJD_HandlerSuccess)success
                                failure:(ZJD_HandlerFail)fail
                                showHUD:(BOOL)showHUD{
    
    DLog(@"请求地址----%@\n    ",url);
    if (url==nil) {
        return nil;
    }
    
    if (showHUD==YES) {
        [MBProgressHUD loadingMBProgressHUD];
    }
    
    NSURLRequest *downloadRequest = [NSURLRequest requestWithURL:[NSURL URLWithString:url]];
    AFHTTPSessionManager *manager = [self getAFManager];
    
    ZJD_URLSessionTask *sessionTask = nil;
    
    sessionTask = [manager downloadTaskWithRequest:downloadRequest progress:^(NSProgress * _Nonnull downloadProgress) {
        DLog(@"下载进度--%.1f",1.0 * downloadProgress.completedUnitCount/downloadProgress.totalUnitCount);
        //回到主线程刷新UI
        dispatch_async(dispatch_get_main_queue(), ^{
            if (progressBlock) {
                progressBlock(downloadProgress.completedUnitCount, downloadProgress.totalUnitCount);
            }
        });
        
    } destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) {
        if (!saveToPath) {
            
            NSURL *downloadURL = [[NSFileManager defaultManager] URLForDirectory:NSDocumentDirectory inDomain:NSUserDomainMask appropriateForURL:nil create:NO error:nil];
            DLog(@"默认路径--%@",downloadURL);
            return [downloadURL URLByAppendingPathComponent:[response suggestedFilename]];
            
        }else{
            return [NSURL fileURLWithPath:saveToPath];
            
        }
        
    } completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) {
        DLog(@"下载文件成功");
        
        [[self tasks] removeObject:sessionTask];
        
        if (error == nil) {
            if (success) {
                success([filePath path]);//返回完整路径
            }
            
        } else {
            if (fail) {
                fail(error);
            }
        }
        
        [MBProgressHUD hiddenMBProgressHUD];
        
    }];
    
    //开始启动任务
    [sessionTask resume];
    if (sessionTask) {
        [[self tasks] addObject:sessionTask];
    }
    
    return sessionTask;
}

+ (AFHTTPSessionManager *)getAFManager{
    
    [AFNetworkActivityIndicatorManager sharedManager].enabled = YES;
    AFHTTPSessionManager *manager = manager = [AFHTTPSessionManager manager];
    // manager.requestSerializer = [AFJSONRequestSerializer serializer];//设置请求数据为json
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];//设置返回数据为NSData
    // manager.responseSerializer = [AFJSONResponseSerializer serializer];//设置返回数据为json

    manager.requestSerializer.stringEncoding  = NSUTF8StringEncoding;
    manager.requestSerializer.timeoutInterval = RequestTimeOutInterval;
    manager.responseSerializer.acceptableContentTypes = [NSSet setWithArray:@[@"application/json",@"text/html",@"text/json",@"text/plain",@"text/javascript",@"text/xml",@"image/*"]];
    
    return manager;
}

#pragma makr - 开始监听网络连接

+ (void)startMonitoring
{
    // 1.获得网络监控的管理者
    AFNetworkReachabilityManager *mgr = [AFNetworkReachabilityManager sharedManager];
    // 2.设置网络状态改变后的处理
    [mgr setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        // 当网络状态改变了, 就会调用这个block
        switch (status)
        {
            case AFNetworkReachabilityStatusUnknown: // 未知网络
                DLog(@"未知网络");
                [ZJD_Networking sharedZJD_Networking].networkStats = ZJD_NetworkStatusUnknown;
                break;
            case AFNetworkReachabilityStatusNotReachable: // 没有网络(断网)
                DLog(@"没有网络");
                [ZJD_Networking sharedZJD_Networking].networkStats = ZJD_NetworkStatusNotReachable;
                break;
            case AFNetworkReachabilityStatusReachableViaWWAN: // 手机自带网络
                DLog(@"手机自带网络");
                [ZJD_Networking sharedZJD_Networking].networkStats = ZJD_NetworkStatusReachableViaWWAN;
                break;
            case AFNetworkReachabilityStatusReachableViaWiFi: // WIFI
                DLog(@"WIFI");
                [ZJD_Networking sharedZJD_Networking].networkStats=ZJD_NetworkStatusReachableViaWiFi;
                break;
        }
    }];
    
    // 注意不是调用自身
    [mgr startMonitoring];
}

+ (BOOL)isConnectionAvailable{
    
    BOOL status ;
    
    Reachability *reach = [Reachability reachabilityForInternetConnection];
    
    NetworkStatus status22 = [reach currentReachabilityStatus];
    
    // 判断网络状态
    if (status22 == ReachableViaWiFi) {
        status = YES;
        //无线网
    } else if (status22 == ReachableViaWWAN) {
        status = YES;
        //移动网
    } else {
        status = NO;
    }
    return status;

    // 这个单例有问题 判断网络状态不准确
    // NSLog(@"网络状态 ：%ld",(long)[[ZJD_Networking sharedZJD_Networking] networkStats]);
    // return [[ZJD_Networking sharedZJD_Networking] networkStats] != ZJD_NetworkStatusNotReachable;
}

/**
 *  错误编码信息
 */
+ (NSString *)messageWithErrorCode:(NSString *)errorCode {
    
    NSDictionary *errCodeMsgDict = @{@"100":@"登录成功",
                                     @"101":@"登录失败！用户名错误",
                                     @"102":@"账号或密码错误",
                                     @"103":@"帐户错误次数过多，暂时停止登录",
                                     @"104":@"未知登录错误",
                                     @"105":@"登录状态过期，请重新登录",
                                     @"200":@"Session登录成功",
                                     @"201":@"Session过期或不存在",
                                     @"300":@"注册成功",
                                     @"301":@"提交方法不对",
                                     @"302":@"用户已经存在",
                                     @"303":@"用户不存在",
                                     @"400":@"退出成功",
                                     @"1000":@"成功",
                                     @"1001":@"查找失败",
                                     @"1002":@"添加失败",
                                     @"1003":@"选题失败",
                                     @"1004":@"修改失败",
                                     @"1005":@"账户不存在，或是已被锁",
                                     @"1101":@"订单生成失败",
                                     @"1102":@"加入收藏失败",
                                     @"1103":@"用户添加年级失败",
                                     @"1104":@"用户添加评论失败",
                                     @"1105":@"用户修改头像失败",
                                     @"1200":@"微信端发送错误信息，生成预支付订单id失败",
                                     @"1201":@"服务器端产生错误",
                                     @"1202":@"极光服务器报错，推送失败"};
    
    if (errCodeMsgDict[errorCode]) {
        return errCodeMsgDict[errorCode];
    }
    return nil;
}


#pragma mark - Self
+ (NSString *)strUTF8Encoding:(NSString *)str{
    return [str stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
}
/**
 *  将服务器获取的数据 转成 OC 的NSDictionary、NSArray、NSString、nil(未识别)
 */
+ (id )resultsWithResponseObject:(id)json {
    
    if (!json || json == (id)kCFNull) {
        NSLog(@"原数据为nil，返回nil");
        return nil;
    }
    
    NSData *jsonData = nil;
    id jsonResults = nil;
    
    if ([json isKindOfClass:[NSDictionary class]]) {
        NSLog(@"返回原字典");
    } else if ([json isKindOfClass:[NSArray class]]) {
        NSLog(@"返回原数组");
    } else if ([json isKindOfClass:[NSString class]]) {
        jsonData = [(NSString *)json dataUsingEncoding : NSUTF8StringEncoding];
    } else if ([json isKindOfClass:[NSData class]]) {
        jsonData = json;
    }
    
    if (jsonData) {
        
        jsonResults = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:NULL];
        
        if ([jsonResults isKindOfClass:[NSDictionary class]]) {
            NSLog(@"JSON数据返回字典");
        } else if ([jsonResults isKindOfClass:[NSArray class]]) {
            NSLog(@"JSON数据返回数组");
        } else if ([jsonResults isKindOfClass:[NSString class]]) {
            NSLog(@"JSON数据返回字符串");
        } else if (jsonResults == nil && [json isKindOfClass:[NSString class]]) {
            NSLog(@"返回原字符串");
            return json;
        } else if (jsonResults == nil && [json isKindOfClass:[NSData class]]) {
            // 不是数组，不是字典，还不是字符串吗？
            NSString *string = [[NSString alloc] initWithData:json encoding:NSUTF8StringEncoding];
            return string;
        } else {
            // 未识别
            NSLog(@"未识别防止解析报错，原数据返回nil");
            NSLog(@"未识别原数据：%@",json);
            return nil;
        }
        
        return jsonResults;
    }
    
    return json;
}

/**
 * 判断 urlStr 是不是图片的 urlStr
 */
+ (NSString *)validImageUrlStr:(NSString *)imageUrlStr {
    
    NSArray *array = @[@"gif",@"GIF",@"jpg",@"JPG",@"jpeg",@"JPEG",@"png",@"PNG"];
    for (NSString *str in array) {
        if ([imageUrlStr containsString:str]) {
            return imageUrlStr;
        }
    }
    return nil;
}

#pragma mark - MBProgressHUD
/**
 * 加载 MBProgressHUD;
 */
+ (void)loadingMBProgressHUDisTapCancel:(BOOL)isTapCancel
                                   task:(ZJD_URLSessionTask *)task {
    
    MBProgressHUD *hud = [MBProgressHUD createMBProgressHUDviewWithMessage:@"点击取消" isWindiw:YES];
    
    if (isTapCancel) {
        [hud setTapActionWithBlock:^{
            [task cancel];
        }];
    }
}

/**
 * 隐藏 MBProgressHUD;
 */
+ (void)hiddenMBProgressHUD{
    UIView  *view = (UIView*)[UIApplication sharedApplication].delegate.window;
    [MBProgressHUD hideHUDForView:view animated:YES];
}

#pragma mark - 网络错误处理
+ (void)dealWithError:(NSError *)error {
    
    [MBProgressHUD hideHUD];
    // 点击取消请求的不提示网络错误
    if (error.code != -999) {
        
        if (error.code == -1001) {
            // 请求超时
            [MBProgressHUD showTipMessageInWindow:Msg_NetworkTimeOut];
        } else {
            // 其它网络错误
            [MBProgressHUD showTipMessageInWindow:Msg_NetworkAnomalies];
        }
    }
}

#pragma mark - Base Request Success And Fail
// 请求成功
+ (void)requestSuccessWithUrl:(NSString *)url
               responseObject:(id)responseObject
                    cacheTime:(NSInteger)cacheTime
                  sessionTask:(ZJD_URLSessionTask *)sessionTask
                      success:(ZJD_HandlerSuccess)success
                      showHUD:(BOOL)showHUD{
    
    // 缓存
    NSString *cacheDirectory = [ZJD_FileManageUnit userFolder];
    EGOCache *egoCache = [[EGOCache globalCache] initWithCacheDirectory:cacheDirectory];
    if (cacheTime && cacheTime != 0) {
        // 缓存有效的数据
        [egoCache setData:responseObject forKey:url withTimeoutInterval:cacheTime];
    }
    
    /**
    // 应该是缓存下面这样的有效的数据，但目前有些接口没有status键值
    if ([ToolClass isNotEmptyDict:responseObject]) {
        if (responseObject[@"status"]&&[responseObject[@"status"] integerValue] == 1000) {
            if (cacheTime && cacheTime != 0) {
                // 缓存有效的数据
                [egoCache setData:responseObject forKey:url withTimeoutInterval:cacheTime];
            }
        }
    }
     */
    
    responseObject = [self resultsWithResponseObject:responseObject];
    NSLog(@"%@",responseObject);
    
    if (success) {
        success(responseObject);
    }
    
    if (showHUD) {
        [MBProgressHUD hiddenMBProgressHUD];
    }
    
    [[self tasks] removeObject:sessionTask];
}
// 请求失败
+ (void)requestFailWithUrl:(NSString *)url
                     error:(NSError *)error
               sessionTask:(ZJD_URLSessionTask *)sessionTask
                      fail:(ZJD_HandlerFail)fail
                   showHUD:(BOOL)showHUD
                faileAlert:(BOOL)faileAlert {
    
    DLog(@"error = %@",error);
    if (fail) {
        fail(error);
    }
    
    if (showHUD) {
        [MBProgressHUD hiddenMBProgressHUD];
    }
    
    // 网络错误的提示
    if (faileAlert) {
        [self dealWithError:error];
    }
    
    [[self tasks] removeObject:sessionTask];
}

@end

