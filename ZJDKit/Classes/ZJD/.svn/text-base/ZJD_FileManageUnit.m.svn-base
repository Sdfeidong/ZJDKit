//
//  ZJD_FileManageUnit.m
//  MYCode
//
//  Created by aidong on 14-9-2.
//  Copyright (c) 2014年 aidong. All rights reserved.
//

#import "ZJD_FileManageUnit.h"

// 已在PrefixHeader.pch 定义过
//#define NFM_DM [NSFileManager defaultManager]

@implementation ZJD_FileManageUnit

// 用户路径
+(NSString *)userPath:(NSString *)path{
    
    if (path == nil) {
        return [[NSUserDefaults standardUserDefaults] objectForKey:@"userPath"];
    }else{
        [[NSUserDefaults standardUserDefaults] setObject:path forKey:@"userPath"];
        return path;
    }
}

// 切换用户时，获取其它用户的文件夹
+(NSString *) otherUserFolder:(NSString *)userAccount {
    
    NSString *document;
    document = [NSHomeDirectory() stringByAppendingPathComponent:[NSString stringWithFormat:@"Library/Caches/Data/%@",userAccount]];
    
    if (![NFM_DM fileExistsAtPath:document] ) {
        NSError *error;
        if (![NFM_DM createDirectoryAtPath:document withIntermediateDirectories:YES attributes:nil error:&error]) {
            // 创建新文件夹
            NSLog(@"error:%@",error);
        }
    }
    NSLog(@"当 %@ 用户文件夹地址：%@",userAccount,document);
    
    return document;
}

// 获取存当前登陆用户文件夹
+(NSString *) userFolder{
    
    NSString *document;
    if ([ZJD_FileManageUnit userPath:nil]!=nil) {
        document = [NSHomeDirectory() stringByAppendingPathComponent:[NSString stringWithFormat:@"Library/Caches/Data/%@",[ZJD_FileManageUnit userPath:nil]]];
    }else{
        document = [NSHomeDirectory() stringByAppendingPathComponent:@"Library/Caches/Data"];
    }
    
    if (![NFM_DM fileExistsAtPath:document] ) {
        
        NSError *error;
        if (![NFM_DM createDirectoryAtPath:document withIntermediateDirectories:YES attributes:nil error:&error]) {
            // 创建新文件夹
            NSLog(@"error:%@",error);
        }
    }
     NSLog(@"当前登录用户文件夹地址：%@",document);
//    
//     //取得一个目录下得所有文件名
//     NSArray *files = [NFM_DM subpathsAtPath:document];
//     NSLog(@"当前文件夹下所有的文件名: %@",files);
    
    return document;
}

// 获取或创建当前登陆用户文件夹下某个文件夹
+(NSString *) userFolder:(NSString *)folder{
    
    NSString *document;
    if ([ZJD_FileManageUnit userPath:nil]!=nil) {
        document = [NSHomeDirectory() stringByAppendingPathComponent:[NSString stringWithFormat:@"Library/Caches/Data/%@/%@",[ZJD_FileManageUnit userPath:nil],folder]];
    }else{
        document = [NSHomeDirectory() stringByAppendingPathComponent:@"Library/Caches/Data"];
    }
    
    if (![NFM_DM fileExistsAtPath:document] ) {
        
        NSError *error;
        if (![NFM_DM createDirectoryAtPath:document withIntermediateDirectories:YES attributes:nil error:&error]) {
            NSLog(@"error:%@",error);
        }
    }
    
    NSLog(@"当前文件夹地址：%@",document);
    return document;
}

// 与上面略有区别，用时请注意。（主要用于对于其它非用户文件夹的操作）
+(NSString *) documentFolder{
    
    NSString *document;
    
    document = [NSHomeDirectory() stringByAppendingPathComponent:@"Library/Caches/Data/Common"];
    
    if (![NFM_DM fileExistsAtPath:document] ) {
        NSError *error;
        if (![NFM_DM createDirectoryAtPath:document withIntermediateDirectories:YES attributes:nil error:&error]) {
            NSLog(@"error:%@",error);
        }
    }
    
    //NSLog(@"document :%@",document);
    return document;
}


#pragma mark -
#pragma mark - 读写都没有意义 好傻的想法。如下两方法弃用。。。
//// 用户文件夹下某个文件内 写文件
//+ (BOOL)fileManage:(NSData *)data
//       writeToFile:(NSString *)filePath
//          fileName:(NSString *)fileName
//        atomically:(BOOL)atomical{
//    
//    filePath = [[ZJD_FileManageUnit userFolder:filePath] stringByAppendingPathComponent:fileName];
//    
//    if ([data writeToFile:filePath atomically:YES]) {
//        return YES;
//    };
//    
//    NSLog(@"%@",[ZJD_FileManageUnit userFolder:filePath]);
//    NSLog(@"文件写入失败，请查看error信息");
//    
//    return NO;
//}
//
//// 用户文件夹下某个文件内 读文件
//+ (NSData *)fileManageDataWithContentsOfFile:(NSString *)filePath{
//    
//    /**
//     
//     在《中国区GPS偏移纠正（适用于Google地图）》一文中曾读取一个78M的大数据文件，一开始采用了NSData的dataWithContentsOfFile:方法。不少人反馈说如果直接使用，将会耗尽iOS的内存。
//     其实这个是可以改善的。
//     NSData还有一个API：
//     + (id)dataWithContentsOfFile:(NSString *)path options:(NSDataReadingOptions)readOptionsMask error:(NSError **)errorPtr; 其中NSDataReadingOptions可以附加一个参数。NSDataReadingMappedIfSafe参数。使用这个参数后，iOS就不会把整个文件全部读取的内存了，而是将文件映射到进程的地址空间中，这么做并不会占用实际内存。这样就可以解决内存满的问题。
//     
//     */
//    
//    NSError *error = nil;
//    return [NSData dataWithContentsOfFile:[ZJD_FileManageUnit userFolder:filePath] options:NSDataReadingMappedIfSafe error:&error];
//    
//    //return [NSData dataWithContentsOfFile:[ZJD_FileManageUnit userFolder:filePath]];
//}

#pragma mark -
#pragma mark - 获取文件大小
//单个文件的大小
+ (long long)fileSizeAtPath:(NSString *) filePath{
    
    if ([NFM_DM fileExistsAtPath:filePath]){
        return [[NFM_DM attributesOfItemAtPath:filePath error:nil] fileSize];
    }
    return 0;
}

//遍历文件夹获得文件夹大小，返回多少M
+ (float)folderSizeAtPath:(NSString *) folderPath{
    
    if (![NFM_DM fileExistsAtPath:folderPath]) return 0;
    NSEnumerator *childFilesEnumerator = [[NFM_DM subpathsAtPath:folderPath] objectEnumerator];
    NSString* fileName;
    long long folderSize = 0;
    while ((fileName = [childFilesEnumerator nextObject]) != nil){
        NSString* fileAbsolutePath = [folderPath stringByAppendingPathComponent:fileName];
        folderSize += [self fileSizeAtPath:fileAbsolutePath];
    }
    return folderSize/(1024.0*1024.0);
}
+ (NSString *)fileSize:(long long)size {
    
    if (size > 1024 * 1024 * 1024) {
        return [NSString stringWithFormat:@"%.2fGB",size/(1024.0*1024.0*1024)];
    } else if (size > 1024 * 1024) {
        return [NSString stringWithFormat:@"%.2fMB",size/(1024.0*1024.0)];
    } else if (size > 1024)  {
        return [NSString stringWithFormat:@"%.2fKB",size/1024.00];
    } else  {
        return [NSString stringWithFormat:@"%lldB",size];
    }
}

@end
